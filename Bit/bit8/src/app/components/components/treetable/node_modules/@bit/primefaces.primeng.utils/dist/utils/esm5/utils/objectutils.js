var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ObjectUtils = /** @class */ (function () {
    function ObjectUtils() {
    }
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @param {?=} field
     * @return {?}
     */
    ObjectUtils.equals = /**
     * @param {?} obj1
     * @param {?} obj2
     * @param {?=} field
     * @return {?}
     */
    function (obj1, obj2, field) {
        if (field)
            return (this.resolveFieldData(obj1, field) === this.resolveFieldData(obj2, field));
        else
            return this.equalsByValue(obj1, obj2);
    };
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    ObjectUtils.equalsByValue = /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function (obj1, obj2) {
        if (obj1 === obj2)
            return true;
        if (obj1 && obj2 && typeof obj1 == 'object' && typeof obj2 == 'object') {
            /** @type {?} */
            var arrA = Array.isArray(obj1);
            /** @type {?} */
            var arrB = Array.isArray(obj2);
            /** @type {?} */
            var i;
            /** @type {?} */
            var length;
            /** @type {?} */
            var key;
            if (arrA && arrB) {
                length = obj1.length;
                if (length != obj2.length)
                    return false;
                for (i = length; i-- !== 0;)
                    if (!this.equalsByValue(obj1[i], obj2[i]))
                        return false;
                return true;
            }
            if (arrA != arrB)
                return false;
            /** @type {?} */
            var dateA = obj1 instanceof Date;
            /** @type {?} */
            var dateB = obj2 instanceof Date;
            if (dateA != dateB)
                return false;
            if (dateA && dateB)
                return obj1.getTime() == obj2.getTime();
            /** @type {?} */
            var regexpA = obj1 instanceof RegExp;
            /** @type {?} */
            var regexpB = obj2 instanceof RegExp;
            if (regexpA != regexpB)
                return false;
            if (regexpA && regexpB)
                return obj1.toString() == obj2.toString();
            /** @type {?} */
            var keys = Object.keys(obj1);
            length = keys.length;
            if (length !== Object.keys(obj2).length)
                return false;
            for (i = length; i-- !== 0;)
                if (!Object.prototype.hasOwnProperty.call(obj2, keys[i]))
                    return false;
            for (i = length; i-- !== 0;) {
                key = keys[i];
                if (!this.equalsByValue(obj1[key], obj2[key]))
                    return false;
            }
            return true;
        }
        return obj1 !== obj1 && obj2 !== obj2;
    };
    /**
     * @param {?} data
     * @param {?} field
     * @return {?}
     */
    ObjectUtils.resolveFieldData = /**
     * @param {?} data
     * @param {?} field
     * @return {?}
     */
    function (data, field) {
        if (data && field) {
            if (this.isFunction(field)) {
                return field(data);
            }
            else if (field.indexOf('.') == -1) {
                return data[field];
            }
            else {
                /** @type {?} */
                var fields = field.split('.');
                /** @type {?} */
                var value = data;
                for (var i = 0, len = fields.length; i < len; ++i) {
                    if (value == null) {
                        return null;
                    }
                    value = value[fields[i]];
                }
                return value;
            }
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ObjectUtils.isFunction = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
    };
    /**
     * @param {?} value
     * @param {?} fields
     * @param {?} filterValue
     * @return {?}
     */
    ObjectUtils.filter = /**
     * @param {?} value
     * @param {?} fields
     * @param {?} filterValue
     * @return {?}
     */
    function (value, fields, filterValue) {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var filteredItems = [];
        /** @type {?} */
        var filterText = this.removeAccents(filterValue).toLowerCase();
        if (value) {
            try {
                for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                    var item = value_1_1.value;
                    try {
                        for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                            var field = fields_1_1.value;
                            /** @type {?} */
                            var fieldValue = this.removeAccents(String(this.resolveFieldData(item, field))).toLowerCase();
                            if (fieldValue.indexOf(filterText) > -1) {
                                filteredItems.push(item);
                                break;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (fields_1_1 && !fields_1_1.done && (_b = fields_1.return)) _b.call(fields_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return filteredItems;
    };
    /**
     * @param {?} value
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    ObjectUtils.reorderArray = /**
     * @param {?} value
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (value, from, to) {
        /** @type {?} */
        var target;
        if (value && from !== to) {
            if (to >= value.length) {
                to %= value.length;
                from %= value.length;
            }
            value.splice(to, 0, value.splice(from, 1)[0]);
        }
    };
    /**
     * @param {?} val
     * @param {?} field
     * @return {?}
     */
    ObjectUtils.generateSelectItems = /**
     * @param {?} val
     * @param {?} field
     * @return {?}
     */
    function (val, field) {
        var e_3, _a;
        /** @type {?} */
        var selectItems;
        if (val && val.length) {
            selectItems = [];
            try {
                for (var val_1 = __values(val), val_1_1 = val_1.next(); !val_1_1.done; val_1_1 = val_1.next()) {
                    var item = val_1_1.value;
                    selectItems.push({ label: this.resolveFieldData(item, field), value: item });
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (val_1_1 && !val_1_1.done && (_a = val_1.return)) _a.call(val_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return selectItems;
    };
    /**
     * @param {?} item
     * @param {?} index
     * @param {?} arr
     * @param {?} sourceArr
     * @return {?}
     */
    ObjectUtils.insertIntoOrderedArray = /**
     * @param {?} item
     * @param {?} index
     * @param {?} arr
     * @param {?} sourceArr
     * @return {?}
     */
    function (item, index, arr, sourceArr) {
        if (arr.length > 0) {
            /** @type {?} */
            var injected = false;
            for (var i = 0; i < arr.length; i++) {
                /** @type {?} */
                var currentItemIndex = this.findIndexInList(arr[i], sourceArr);
                if (currentItemIndex > index) {
                    arr.splice(i, 0, item);
                    injected = true;
                    break;
                }
            }
            if (!injected) {
                arr.push(item);
            }
        }
        else {
            arr.push(item);
        }
    };
    /**
     * @param {?} item
     * @param {?} list
     * @return {?}
     */
    ObjectUtils.findIndexInList = /**
     * @param {?} item
     * @param {?} list
     * @return {?}
     */
    function (item, list) {
        /** @type {?} */
        var index = -1;
        if (list) {
            for (var i = 0; i < list.length; i++) {
                if (list[i] == item) {
                    index = i;
                    break;
                }
            }
        }
        return index;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    ObjectUtils.removeAccents = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (str && str.search(/[\xC0-\xFF]/g) > -1) {
            str = str
                .replace(/[\xC0-\xC5]/g, "A")
                .replace(/[\xC6]/g, "AE")
                .replace(/[\xC7]/g, "C")
                .replace(/[\xC8-\xCB]/g, "E")
                .replace(/[\xCC-\xCF]/g, "I")
                .replace(/[\xD0]/g, "D")
                .replace(/[\xD1]/g, "N")
                .replace(/[\xD2-\xD6\xD8]/g, "O")
                .replace(/[\xD9-\xDC]/g, "U")
                .replace(/[\xDD]/g, "Y")
                .replace(/[\xDE]/g, "P")
                .replace(/[\xE0-\xE5]/g, "a")
                .replace(/[\xE6]/g, "ae")
                .replace(/[\xE7]/g, "c")
                .replace(/[\xE8-\xEB]/g, "e")
                .replace(/[\xEC-\xEF]/g, "i")
                .replace(/[\xF1]/g, "n")
                .replace(/[\xF2-\xF6\xF8]/g, "o")
                .replace(/[\xF9-\xFC]/g, "u")
                .replace(/[\xFE]/g, "p")
                .replace(/[\xFD\xFF]/g, "y");
        }
        return str;
    };
    return ObjectUtils;
}());
export { ObjectUtils };
//# sourceMappingURL=data:application/json;base64,