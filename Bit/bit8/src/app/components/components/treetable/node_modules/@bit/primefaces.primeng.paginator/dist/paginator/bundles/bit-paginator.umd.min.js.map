{"version":3,"sources":["ng://@bit/primefaces.primeng.paginator/paginator/paginator.ts"],"names":["Paginator","cd","this","pageLinkSize","onPageChange","EventEmitter","alwaysShow","dropdownScrollHeight","currentPageReportTemplate","_totalRecords","_first","_rows","prototype","ngOnInit","updatePaginatorState","Object","defineProperty","val","updatePageLinks","updateFirst","updateRowsPerPageOptions","_rowsPerPageOptions","rowsPerPageOptions","rowsPerPageItems","_b","__values","_c","next","done","opt","value","push","label","totalRecords","String","isFirstPage","getPage","isLastPage","getPageCount","Math","ceil","rows","calculatePageLinkBoundaries","numberOfPages","visiblePages","min","start","max","end","delta","pageLinks","boundaries","i","changePage","p","pc","first","state","page","pageCount","emit","_this","Promise","resolve","then","floor","changePageToFirst","event","preventDefault","changePageToPrev","changePageToNext","changePageToLast","onPageLinkClick","onRppChange","paginatorState","replace","toString","Component","args","selector","template","ChangeDetectorRef","Input","Output","PaginatorModule","NgModule","imports","CommonModule","DropdownModule","FormsModule","SharedModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,OnInit,Input,Output,ChangeDetectorRef,EventEmitter,TemplateRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {DropdownModule} from '../dropdown/dropdown';\nimport {SelectItem} from '../common/selectitem';\nimport {SharedModule} from '../common/shared';\n\n@Component({\n    selector: 'p-paginator',\n    template: `\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'ui-paginator ui-widget ui-widget-header ui-unselectable-text ui-helper-clearfix'\"\n            *ngIf=\"alwaysShow ? true : (pageLinks && pageLinks.length > 1)\">\n            <div class=\"ui-paginator-left-content\" *ngIf=\"templateLeft\">\n                <ng-container *ngTemplateOutlet=\"templateLeft; context: {$implicit: paginatorState}\"></ng-container>\n            </div>\n            <span class=\"ui-paginator-current\" *ngIf=\"showCurrentPageReport\">{{currentPageReport}}</span>\n            <a [attr.tabindex]=\"isFirstPage() ? null : '0'\" class=\"ui-paginator-first ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToFirst($event)\" (keydown.enter)=\"changePageToFirst($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-step-backward\"></span>\n            </a>\n            <a tabindex=\"0\" [attr.tabindex]=\"isFirstPage() ? null : '0'\" class=\"ui-paginator-prev ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToPrev($event)\" (keydown.enter)=\"changePageToPrev($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-caret-left\"></span>\n            </a>\n            <span class=\"ui-paginator-pages\">\n                <a tabindex=\"0\" *ngFor=\"let pageLink of pageLinks\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"onPageLinkClick($event, pageLink - 1)\" (keydown.enter)=\"onPageLinkClick($event, pageLink - 1)\" [ngClass]=\"{'ui-state-active': (pageLink-1 == getPage())}\">{{pageLink}}</a>\n            </span>\n            <a [attr.tabindex]=\"isLastPage() ? null : '0'\" class=\"ui-paginator-next ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToNext($event)\" (keydown.enter)=\"changePageToNext($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-caret-right\"></span>\n            </a>\n            <a [attr.tabindex]=\"isLastPage() ? null : '0'\" class=\"ui-paginator-last ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToLast($event)\" (keydown.enter)=\"changePageToLast($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-step-forward\"></span>\n            </a>\n            <p-dropdown [options]=\"rowsPerPageItems\" [(ngModel)]=\"rows\" *ngIf=\"rowsPerPageOptions\" \n                (onChange)=\"onRppChange($event)\" [appendTo]=\"dropdownAppendTo\" [scrollHeight]=\"dropdownScrollHeight\"></p-dropdown>\n            <div class=\"ui-paginator-right-content\" *ngIf=\"templateRight\">\n                <ng-container *ngTemplateOutlet=\"templateRight; context: {$implicit: paginatorState}\"></ng-container>\n            </div>\n        </div>\n    `\n})\nexport class Paginator implements OnInit {\n\n    @Input() pageLinkSize: number = 5;\n\n    @Output() onPageChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() alwaysShow: boolean = true;\n    \n    @Input() templateLeft: TemplateRef<any>;\n    \n    @Input() templateRight: TemplateRef<any>;\n\n    @Input() dropdownAppendTo: any;\n\n    @Input() dropdownScrollHeight: string = '200px';\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    pageLinks: number[];\n\n    _totalRecords: number = 0;\n\n    _first: number = 0;\n\n    _rows: number = 0;\n    \n    _rowsPerPageOptions: any[];\n    \n    rowsPerPageItems: SelectItem[];\n    \n    paginatorState: any;\n\n    constructor(private cd: ChangeDetectorRef) {}\n    \n    ngOnInit() {\n        this.updatePaginatorState();\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n\n    set totalRecords(val:number) {\n        this._totalRecords = val;\n        this.updatePageLinks();\n        this.updatePaginatorState();\n        this.updateFirst();\n        this.updateRowsPerPageOptions();\n    }\n\n    @Input() get first(): number {\n        return this._first;\n    }\n\n    set first(val:number) {\n        this._first = val;\n        this.updatePageLinks();\n        this.updatePaginatorState();\n    }\n\n    @Input() get rows(): number {\n        return this._rows;\n    }\n\n    set rows(val:number) {\n        this._rows = val;\n        this.updatePageLinks();\n        this.updatePaginatorState();\n    }\n    \n    @Input() get rowsPerPageOptions(): any[] {\n        return this._rowsPerPageOptions;\n    }\n\n    set rowsPerPageOptions(val:any[]) {\n        this._rowsPerPageOptions = val;\n        this.updateRowsPerPageOptions();\n    }\n\n    updateRowsPerPageOptions() {\n        if(this.rowsPerPageOptions) {\n            this.rowsPerPageItems = [];\n            for (let opt of this.rowsPerPageOptions) {\n                if (typeof opt == 'object' && opt['showAll']) {\n                    this.rowsPerPageItems.push({label: opt['showAll'], value: this.totalRecords});\n                }\n                else {\n                    this.rowsPerPageItems.push({label: String(opt), value: opt});\n                }\n            }\n        }\n    }\n\n    isFirstPage() {\n        return this.getPage() === 0;\n    }\n\n    isLastPage() {\n        return this.getPage() === this.getPageCount() - 1;\n    }\n\n    getPageCount() {\n        return Math.ceil(this.totalRecords/this.rows)||1;\n    }\n\n    calculatePageLinkBoundaries() {\n        let numberOfPages = this.getPageCount(),\n        visiblePages = Math.min(this.pageLinkSize, numberOfPages);\n\n        //calculate range, keep current in middle if necessary\n        let start = Math.max(0, Math.ceil(this.getPage() - ((visiblePages) / 2))),\n        end = Math.min(numberOfPages - 1, start + visiblePages - 1);\n\n        //check when approaching to last page\n        var delta = this.pageLinkSize - (end - start + 1);\n        start = Math.max(0, start - delta);\n\n        return [start, end];\n    }\n\n    updatePageLinks() {\n        this.pageLinks = [];\n        let boundaries = this.calculatePageLinkBoundaries(),\n        start = boundaries[0],\n        end = boundaries[1];\n\n        for(let i = start; i <= end; i++) {\n            this.pageLinks.push(i + 1);\n        }\n    }\n\n    changePage(p :number) {\n        var pc = this.getPageCount();\n\n        if(p >= 0 && p < pc) {\n            this.first = this.rows * p;\n            var state = {\n                page: p,\n                first: this.first,\n                rows: this.rows,\n                pageCount: pc\n            };\n            this.updatePageLinks();\n\n            this.onPageChange.emit(state);\n            this.updatePaginatorState();\n        }\n    }\n\n    updateFirst() {\n        const page = this.getPage();\n        if (page > 0 && (this.first >= this.totalRecords)) {\n            Promise.resolve(null).then(() => this.changePage(page - 1));\n        }\n    }\n\n    getPage(): number {\n        return Math.floor(this.first / this.rows);\n    }\n\n    changePageToFirst(event) {\n      if(!this.isFirstPage()){\n          this.changePage(0);\n      }\n\n      event.preventDefault();\n    }\n\n    changePageToPrev(event) {\n        this.changePage(this.getPage() - 1);\n        event.preventDefault();\n    }\n\n    changePageToNext(event) {\n        this.changePage(this.getPage()  + 1);\n        event.preventDefault();\n    }\n\n    changePageToLast(event) {\n      if(!this.isLastPage()){\n          this.changePage(this.getPageCount() - 1);\n      }\n\n      event.preventDefault();\n    }\n\n    onPageLinkClick(event, page) {\n        this.changePage(page);\n        event.preventDefault();\n    }\n\n    onRppChange(event) {\n        this.changePage(this.getPage());\n    }\n    \n    updatePaginatorState() {\n        this.paginatorState = {\n            page: this.getPage(),\n            pageCount: this.getPageCount(),\n            rows: this.rows,\n            first: this.first,\n            totalRecords: this.totalRecords\n        }\n    }\n\n    get currentPageReport() {\n        return this.currentPageReportTemplate\n            .replace(\"{currentPage}\", (this.getPage() + 1).toString())\n            .replace(\"{totalPages}\", this.getPageCount().toString());\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,DropdownModule,FormsModule,SharedModule],\n    exports: [Paginator,DropdownModule,FormsModule,SharedModule],\n    declarations: [Paginator]\n})\nexport class PaginatorModule { }\n"]}