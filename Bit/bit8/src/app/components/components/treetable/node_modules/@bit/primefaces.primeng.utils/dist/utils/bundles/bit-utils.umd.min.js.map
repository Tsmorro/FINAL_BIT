{"version":3,"sources":["ng://@bit/primefaces.primeng.utils/utils/objectutils.ts"],"names":["ObjectUtils","equals","obj1","obj2","field","this","resolveFieldData","equalsByValue","i","length","key","arrA","Array","isArray","arrB","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","keys","Object","prototype","hasOwnProperty","call","data","isFunction","indexOf","fields","split","value","len","obj","constructor","apply","filter","filterValue","filteredItems","filterText","removeAccents","toLowerCase","value_1","__values","value_1_1","next","done","item","fields_1","fields_1_1","String","push","reorderArray","from","to","splice","generateSelectItems","val","selectItems","val_1","val_1_1","label","insertIntoOrderedArray","index","arr","sourceArr","injected","findIndexInList","list","str","search","replace"],"mappings":"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","sourcesContent":["import {SelectItem} from '../common/selectitem';\n\nexport class ObjectUtils {\n\n    public static equals(obj1: any, obj2: any, field?: string): boolean {\n        if (field)\n            return (this.resolveFieldData(obj1, field) === this.resolveFieldData(obj2, field));\n        else\n            return this.equalsByValue(obj1, obj2);\n    }\n\n    public static equalsByValue(obj1: any, obj2: any): boolean {\n        if (obj1 === obj2) return true;\n\n        if (obj1 && obj2 && typeof obj1 == 'object' && typeof obj2 == 'object') {\n            var arrA = Array.isArray(obj1)\n                , arrB = Array.isArray(obj2)\n                , i\n                , length\n                , key;\n\n            if (arrA && arrB) {\n                length = obj1.length;\n                if (length != obj2.length) return false;\n                for (i = length; i-- !== 0;)\n                    if (!this.equalsByValue(obj1[i], obj2[i])) return false;\n                return true;\n            }\n\n            if (arrA != arrB) return false;\n\n            var dateA = obj1 instanceof Date\n                , dateB = obj2 instanceof Date;\n            if (dateA != dateB) return false;\n            if (dateA && dateB) return obj1.getTime() == obj2.getTime();\n\n            var regexpA = obj1 instanceof RegExp\n                , regexpB = obj2 instanceof RegExp;\n            if (regexpA != regexpB) return false;\n            if (regexpA && regexpB) return obj1.toString() == obj2.toString();\n\n            var keys = Object.keys(obj1);\n            length = keys.length;\n\n            if (length !== Object.keys(obj2).length)\n                return false;\n\n            for (i = length; i-- !== 0;)\n                if (!Object.prototype.hasOwnProperty.call(obj2, keys[i])) return false;\n\n            for (i = length; i-- !== 0;) {\n                key = keys[i];\n                if (!this.equalsByValue(obj1[key], obj2[key])) return false;\n            }\n\n            return true;\n        }\n\n        return obj1 !== obj1 && obj2 !== obj2;\n    }\n\n    public static resolveFieldData(data: any, field: any): any {\n        if(data && field) {\n            if (this.isFunction(field)) {\n                return field(data);\n            }\n            else if(field.indexOf('.') == -1) {\n                return data[field];\n            }\n            else {\n                let fields: string[] = field.split('.');\n                let value = data;\n                for(let i = 0, len = fields.length; i < len; ++i) {\n                    if (value == null) {\n                        return null;\n                    }\n                    value = value[fields[i]];\n                }\n                return value;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    public static isFunction(obj: any) {\n        return !!(obj && obj.constructor && obj.call && obj.apply);\n    }\n\n    public static filter(value: any[], fields: any[], filterValue: string) {\n        let filteredItems: any[] = [];\n        let filterText = this.removeAccents(filterValue).toLowerCase();\n\n        if(value) {\n            for(let item of value) {\n                for(let field of fields) {\n                    let fieldValue = this.removeAccents(String(this.resolveFieldData(item, field))).toLowerCase();\n                    if(fieldValue.indexOf(filterText) > -1) {\n                        filteredItems.push(item);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return filteredItems;\n    }\n\n    public static reorderArray(value: any[], from: number, to: number) {\n        let target: number;\n        if (value && from !== to) {\n            if (to >= value.length) {\n                to %= value.length;\n                from %= value.length;\n            }\n            value.splice(to, 0, value.splice(from, 1)[0]);\n        }\n    }\n\n    public static generateSelectItems(val: any[], field: string): SelectItem[] {\n        let selectItems: SelectItem[];\n        if(val && val.length) {\n            selectItems = [];\n            for(let item of val) {\n                selectItems.push({label: this.resolveFieldData(item, field), value: item});\n            }\n        }\n\n        return selectItems;\n    }\n\n    public static insertIntoOrderedArray(item: any, index: number, arr: any[], sourceArr: any[]): void {\n        if(arr.length > 0) {\n            let injected = false;\n            for(let i = 0; i < arr.length; i++) {\n                let currentItemIndex = this.findIndexInList(arr[i], sourceArr);\n                if(currentItemIndex > index) {\n                    arr.splice(i, 0, item);\n                    injected = true;\n                    break;\n                }\n            }\n\n            if(!injected) {\n                arr.push(item);\n            }\n        }\n        else {\n            arr.push(item);\n        }\n    }\n\n    public static findIndexInList(item: any, list: any): number {\n        let index: number = -1;\n\n        if(list) {\n            for(let i = 0; i < list.length; i++) {\n                if(list[i] == item) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    public static removeAccents(str) {\n        if (str && str.search(/[\\xC0-\\xFF]/g) > -1) {\n            str = str\n                    .replace(/[\\xC0-\\xC5]/g, \"A\")\n                    .replace(/[\\xC6]/g, \"AE\")\n                    .replace(/[\\xC7]/g, \"C\")\n                    .replace(/[\\xC8-\\xCB]/g, \"E\")\n                    .replace(/[\\xCC-\\xCF]/g, \"I\")\n                    .replace(/[\\xD0]/g, \"D\")\n                    .replace(/[\\xD1]/g, \"N\")\n                    .replace(/[\\xD2-\\xD6\\xD8]/g, \"O\")\n                    .replace(/[\\xD9-\\xDC]/g, \"U\")\n                    .replace(/[\\xDD]/g, \"Y\")\n                    .replace(/[\\xDE]/g, \"P\")\n                    .replace(/[\\xE0-\\xE5]/g, \"a\")\n                    .replace(/[\\xE6]/g, \"ae\")\n                    .replace(/[\\xE7]/g, \"c\")\n                    .replace(/[\\xE8-\\xEB]/g, \"e\")\n                    .replace(/[\\xEC-\\xEF]/g, \"i\")\n                    .replace(/[\\xF1]/g, \"n\")\n                    .replace(/[\\xF2-\\xF6\\xF8]/g, \"o\")\n                    .replace(/[\\xF9-\\xFC]/g, \"u\")\n                    .replace(/[\\xFE]/g, \"p\")\n                    .replace(/[\\xFD\\xFF]/g, \"y\");\n        }\n      \n        return str;\n      }\n}\n"]}