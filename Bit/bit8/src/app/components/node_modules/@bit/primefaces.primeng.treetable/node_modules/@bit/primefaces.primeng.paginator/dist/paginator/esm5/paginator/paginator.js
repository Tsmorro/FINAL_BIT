var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Component, Input, Output, ChangeDetectorRef, EventEmitter, TemplateRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { DropdownModule } from '../dropdown/dropdown';
import { SharedModule } from '../common/shared';
var Paginator = /** @class */ (function () {
    function Paginator(cd) {
        this.cd = cd;
        this.pageLinkSize = 5;
        this.onPageChange = new EventEmitter();
        this.alwaysShow = true;
        this.dropdownScrollHeight = '200px';
        this.currentPageReportTemplate = '{currentPage} of {totalPages}';
        this._totalRecords = 0;
        this._first = 0;
        this._rows = 0;
    }
    /**
     * @return {?}
     */
    Paginator.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updatePaginatorState();
    };
    Object.defineProperty(Paginator.prototype, "totalRecords", {
        get: /**
         * @return {?}
         */
        function () {
            return this._totalRecords;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._totalRecords = val;
            this.updatePageLinks();
            this.updatePaginatorState();
            this.updateFirst();
            this.updateRowsPerPageOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Paginator.prototype, "first", {
        get: /**
         * @return {?}
         */
        function () {
            return this._first;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._first = val;
            this.updatePageLinks();
            this.updatePaginatorState();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Paginator.prototype, "rows", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rows;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._rows = val;
            this.updatePageLinks();
            this.updatePaginatorState();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Paginator.prototype, "rowsPerPageOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rowsPerPageOptions;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._rowsPerPageOptions = val;
            this.updateRowsPerPageOptions();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Paginator.prototype.updateRowsPerPageOptions = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.rowsPerPageOptions) {
            this.rowsPerPageItems = [];
            try {
                for (var _b = __values(this.rowsPerPageOptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var opt = _c.value;
                    if (typeof opt == 'object' && opt['showAll']) {
                        this.rowsPerPageItems.push({ label: opt['showAll'], value: this.totalRecords });
                    }
                    else {
                        this.rowsPerPageItems.push({ label: String(opt), value: opt });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    Paginator.prototype.isFirstPage = /**
     * @return {?}
     */
    function () {
        return this.getPage() === 0;
    };
    /**
     * @return {?}
     */
    Paginator.prototype.isLastPage = /**
     * @return {?}
     */
    function () {
        return this.getPage() === this.getPageCount() - 1;
    };
    /**
     * @return {?}
     */
    Paginator.prototype.getPageCount = /**
     * @return {?}
     */
    function () {
        return Math.ceil(this.totalRecords / this.rows) || 1;
    };
    /**
     * @return {?}
     */
    Paginator.prototype.calculatePageLinkBoundaries = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var numberOfPages = this.getPageCount();
        /** @type {?} */
        var visiblePages = Math.min(this.pageLinkSize, numberOfPages);
        //calculate range, keep current in middle if necessary
        /** @type {?} */
        var start = Math.max(0, Math.ceil(this.getPage() - ((visiblePages) / 2)));
        /** @type {?} */
        var end = Math.min(numberOfPages - 1, start + visiblePages - 1);
        //check when approaching to last page
        /** @type {?} */
        var delta = this.pageLinkSize - (end - start + 1);
        start = Math.max(0, start - delta);
        return [start, end];
    };
    /**
     * @return {?}
     */
    Paginator.prototype.updatePageLinks = /**
     * @return {?}
     */
    function () {
        this.pageLinks = [];
        /** @type {?} */
        var boundaries = this.calculatePageLinkBoundaries();
        /** @type {?} */
        var start = boundaries[0];
        /** @type {?} */
        var end = boundaries[1];
        for (var i = start; i <= end; i++) {
            this.pageLinks.push(i + 1);
        }
    };
    /**
     * @param {?} p
     * @return {?}
     */
    Paginator.prototype.changePage = /**
     * @param {?} p
     * @return {?}
     */
    function (p) {
        /** @type {?} */
        var pc = this.getPageCount();
        if (p >= 0 && p < pc) {
            this.first = this.rows * p;
            /** @type {?} */
            var state = {
                page: p,
                first: this.first,
                rows: this.rows,
                pageCount: pc
            };
            this.updatePageLinks();
            this.onPageChange.emit(state);
            this.updatePaginatorState();
        }
    };
    /**
     * @return {?}
     */
    Paginator.prototype.updateFirst = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var page = this.getPage();
        if (page > 0 && (this.first >= this.totalRecords)) {
            Promise.resolve(null).then((/**
             * @return {?}
             */
            function () { return _this.changePage(page - 1); }));
        }
    };
    /**
     * @return {?}
     */
    Paginator.prototype.getPage = /**
     * @return {?}
     */
    function () {
        return Math.floor(this.first / this.rows);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Paginator.prototype.changePageToFirst = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isFirstPage()) {
            this.changePage(0);
        }
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Paginator.prototype.changePageToPrev = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.changePage(this.getPage() - 1);
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Paginator.prototype.changePageToNext = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.changePage(this.getPage() + 1);
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Paginator.prototype.changePageToLast = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isLastPage()) {
            this.changePage(this.getPageCount() - 1);
        }
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @param {?} page
     * @return {?}
     */
    Paginator.prototype.onPageLinkClick = /**
     * @param {?} event
     * @param {?} page
     * @return {?}
     */
    function (event, page) {
        this.changePage(page);
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Paginator.prototype.onRppChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.changePage(this.getPage());
    };
    /**
     * @return {?}
     */
    Paginator.prototype.updatePaginatorState = /**
     * @return {?}
     */
    function () {
        this.paginatorState = {
            page: this.getPage(),
            pageCount: this.getPageCount(),
            rows: this.rows,
            first: this.first,
            totalRecords: this.totalRecords
        };
    };
    Object.defineProperty(Paginator.prototype, "currentPageReport", {
        get: /**
         * @return {?}
         */
        function () {
            return this.currentPageReportTemplate
                .replace("{currentPage}", (this.getPage() + 1).toString())
                .replace("{totalPages}", this.getPageCount().toString());
        },
        enumerable: true,
        configurable: true
    });
    Paginator.decorators = [
        { type: Component, args: [{
                    selector: 'p-paginator',
                    template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'ui-paginator ui-widget ui-widget-header ui-unselectable-text ui-helper-clearfix'\"\n            *ngIf=\"alwaysShow ? true : (pageLinks && pageLinks.length > 1)\">\n            <div class=\"ui-paginator-left-content\" *ngIf=\"templateLeft\">\n                <ng-container *ngTemplateOutlet=\"templateLeft; context: {$implicit: paginatorState}\"></ng-container>\n            </div>\n            <span class=\"ui-paginator-current\" *ngIf=\"showCurrentPageReport\">{{currentPageReport}}</span>\n            <a [attr.tabindex]=\"isFirstPage() ? null : '0'\" class=\"ui-paginator-first ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToFirst($event)\" (keydown.enter)=\"changePageToFirst($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-step-backward\"></span>\n            </a>\n            <a tabindex=\"0\" [attr.tabindex]=\"isFirstPage() ? null : '0'\" class=\"ui-paginator-prev ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToPrev($event)\" (keydown.enter)=\"changePageToPrev($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-caret-left\"></span>\n            </a>\n            <span class=\"ui-paginator-pages\">\n                <a tabindex=\"0\" *ngFor=\"let pageLink of pageLinks\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"onPageLinkClick($event, pageLink - 1)\" (keydown.enter)=\"onPageLinkClick($event, pageLink - 1)\" [ngClass]=\"{'ui-state-active': (pageLink-1 == getPage())}\">{{pageLink}}</a>\n            </span>\n            <a [attr.tabindex]=\"isLastPage() ? null : '0'\" class=\"ui-paginator-next ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToNext($event)\" (keydown.enter)=\"changePageToNext($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-caret-right\"></span>\n            </a>\n            <a [attr.tabindex]=\"isLastPage() ? null : '0'\" class=\"ui-paginator-last ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToLast($event)\" (keydown.enter)=\"changePageToLast($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-step-forward\"></span>\n            </a>\n            <p-dropdown [options]=\"rowsPerPageItems\" [(ngModel)]=\"rows\" *ngIf=\"rowsPerPageOptions\" \n                (onChange)=\"onRppChange($event)\" [appendTo]=\"dropdownAppendTo\" [scrollHeight]=\"dropdownScrollHeight\"></p-dropdown>\n            <div class=\"ui-paginator-right-content\" *ngIf=\"templateRight\">\n                <ng-container *ngTemplateOutlet=\"templateRight; context: {$implicit: paginatorState}\"></ng-container>\n            </div>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    Paginator.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    Paginator.propDecorators = {
        pageLinkSize: [{ type: Input }],
        onPageChange: [{ type: Output }],
        style: [{ type: Input }],
        styleClass: [{ type: Input }],
        alwaysShow: [{ type: Input }],
        templateLeft: [{ type: Input }],
        templateRight: [{ type: Input }],
        dropdownAppendTo: [{ type: Input }],
        dropdownScrollHeight: [{ type: Input }],
        currentPageReportTemplate: [{ type: Input }],
        showCurrentPageReport: [{ type: Input }],
        totalRecords: [{ type: Input }],
        first: [{ type: Input }],
        rows: [{ type: Input }],
        rowsPerPageOptions: [{ type: Input }]
    };
    return Paginator;
}());
export { Paginator };
if (false) {
    /** @type {?} */
    Paginator.prototype.pageLinkSize;
    /** @type {?} */
    Paginator.prototype.onPageChange;
    /** @type {?} */
    Paginator.prototype.style;
    /** @type {?} */
    Paginator.prototype.styleClass;
    /** @type {?} */
    Paginator.prototype.alwaysShow;
    /** @type {?} */
    Paginator.prototype.templateLeft;
    /** @type {?} */
    Paginator.prototype.templateRight;
    /** @type {?} */
    Paginator.prototype.dropdownAppendTo;
    /** @type {?} */
    Paginator.prototype.dropdownScrollHeight;
    /** @type {?} */
    Paginator.prototype.currentPageReportTemplate;
    /** @type {?} */
    Paginator.prototype.showCurrentPageReport;
    /** @type {?} */
    Paginator.prototype.pageLinks;
    /** @type {?} */
    Paginator.prototype._totalRecords;
    /** @type {?} */
    Paginator.prototype._first;
    /** @type {?} */
    Paginator.prototype._rows;
    /** @type {?} */
    Paginator.prototype._rowsPerPageOptions;
    /** @type {?} */
    Paginator.prototype.rowsPerPageItems;
    /** @type {?} */
    Paginator.prototype.paginatorState;
    /**
     * @type {?}
     * @private
     */
    Paginator.prototype.cd;
}
var PaginatorModule = /** @class */ (function () {
    function PaginatorModule() {
    }
    PaginatorModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, DropdownModule, FormsModule, SharedModule],
                    exports: [Paginator, DropdownModule, FormsModule, SharedModule],
                    declarations: [Paginator]
                },] }
    ];
    return PaginatorModule;
}());
export { PaginatorModule };
//# sourceMappingURL=data:application/json;base64,