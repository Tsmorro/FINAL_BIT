{"version":3,"sources":["ng://@bit/primefaces.primeng.dropdown/dropdown/dropdown.ts"],"names":["DROPDOWN_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Dropdown","multi","DropdownItem","this","onClick","EventEmitter","prototype","onOptionClick","event","emit","originalEvent","option","Component","args","selector","template","Input","Output","el","renderer","cd","zone","scrollHeight","filterBy","resetFilterOnHide","dropdownIcon","autoDisplayFirst","emptyFilterMessage","autoZIndex","baseZIndex","showTransitionOptions","hideTransitionOptions","onChange","onFocus","onBlur","onShow","onHide","onModelChange","onModelTouched","Object","defineProperty","_autoWidth","console","log","_disabled","focused","detectChanges","ngAfterContentInit","_this","templates","forEach","item","getType","itemTemplate","selectedItemTemplate","groupTemplate","ngOnInit","optionsToDisplay","options","updateSelectedOption","_options","val","opts","optionLabel","ObjectUtils","generateSelectItems","value","optionsChanged","filterValue","length","activateFilter","ngAfterViewInit","editable","updateEditableLabel","selectedOption","label","editableInputViewChild","nativeElement","onItemClick","index","itemClick","virtualScroll","virtualScrollSelectedIndex","disabled","selectItem","focusViewChild","focus","filled","setTimeout","hide","ngAfterViewChecked","overlayVisible","runOutsideAngular","alignOverlay","selectedOptionUpdated","itemsWrapper","DomHandler","findSingle","overlay","scrollInView","writeValue","filter","resetFilter","updateFilledState","markForCheck","filterViewChild","findOption","placeholder","registerOnChange","fn","registerOnTouched","setDisabledState","onMouseclick","readonly","selfClick","clearClick","hasClass","target","show","onEditableInputClick","bindDocumentClickListener","onEditableInputFocus","onEditableInputChange","onOverlayAnimationStart","toState","element","appendOverlay","style","zIndex","String","zindex","bindDocumentResizeListener","selectedListItem","onOverlayHide","scrollToSelectedVirtualScrollElement","virtualAutoScrolled","findIndex","viewPort","scrollToIndex","appendTo","document","body","appendChild","minWidth","getWidth","containerViewChild","restoreOverlayAppend","absolutePosition","relativePosition","onInputFocus","onInputBlur","findPrevEnabledOption","prevEnabledOption","i","findNextEnabledOption","nextEnabledOption","onKeydown","search","which","altKey","group","selectedItemIndex","findOptionGroupIndex","nextItemIndex","itemIndex","groupIndex","items","findOptionIndex","preventDefault","prevItemIndex","prevGroup","searchTimeout","clearTimeout","newOption","char","fromCharCode","keyCode","previousSearchChar","currentSearchChar","searchValue","searchIndex","searchOptionWithinGroup","searchOption","searchOptionInRange","start","end","opt","toLowerCase","startsWith","j","equals","dataKey","inGroup","opts_1","__values","opts_1_1","next","done","optgroup","onFilter","inputValue","searchFields","split","filteredGroups","_b","_c","filteredSubOptions","push","applyFocus","documentClickListener","listen","unbindDocumentClickListener","clearClickState","documentResizeListener","onWindowResize","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","isAndroid","clear","ngOnDestroy","animations","trigger","state","transform","opacity","transition","animate","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","providers","ElementRef","Renderer2","ChangeDetectorRef","NgZone","ViewChild","static","CdkVirtualScrollViewport","ContentChildren","PrimeTemplate","DropdownModule","NgModule","imports","CommonModule","SharedModule","ScrollingModule","exports","declarations"],"mappings":"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","sourcesContent":["import {ScrollingModule, CdkVirtualScrollViewport} from '@angular/cdk/scrolling';\nimport {NgModule,Component,ElementRef,OnInit,AfterViewInit,AfterContentInit,AfterViewChecked,OnDestroy,Input,Output,Renderer2,EventEmitter,ContentChildren,\n        QueryList,ViewChild,TemplateRef,forwardRef,ChangeDetectorRef,NgZone} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SelectItem} from '../common/selectitem';\nimport {SharedModule,PrimeTemplate} from '../common/shared';\nimport {DomHandler} from '../dom/domhandler';\nimport {ObjectUtils} from '../utils/objectutils';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const DROPDOWN_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Dropdown),\n  multi: true\n};\n\n@Component({\n    selector: 'p-dropdownItem',\n    template: `\n        <li (click)=\"onOptionClick($event)\" role=\"option\"\n            [attr.aria-label]=\"option.label\"\n            [ngStyle]=\"{'height': itemSize + 'px'}\"\n            [ngClass]=\"{'ui-dropdown-item ui-corner-all':true,\n                                                'ui-state-highlight': selected,\n                                                'ui-state-disabled':(option.disabled),\n                                                'ui-dropdown-item-empty': !option.label||option.label.length === 0}\">\n            <span *ngIf=\"!template\">{{option.label||'empty'}}</span>\n            <ng-container *ngTemplateOutlet=\"template; context: {$implicit: option}\"></ng-container>\n        </li>\n    `\n})\nexport class DropdownItem {\n\n    @Input() option: SelectItem;\n\n    @Input() selected: boolean;\n\n    @Input() disabled: boolean;\n\n    @Input() visible: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() template: TemplateRef<any>;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n\n\n    onOptionClick(event: Event) {\n        this.onClick.emit({\n            originalEvent: event,\n            option: this.option\n        });\n    }\n}\n\n\n\n@Component({\n    selector: 'p-dropdown',\n    template: `\n         <div #container [ngClass]=\"{'ui-dropdown ui-widget ui-state-default ui-corner-all ui-helper-clearfix':true,\n            'ui-state-disabled':disabled, 'ui-dropdown-open':overlayVisible, 'ui-state-focus':focused, 'ui-dropdown-clearable': showClear && !disabled}\"\n            (click)=\"onMouseclick($event)\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #in [attr.id]=\"inputId\" type=\"text\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" readonly (focus)=\"onInputFocus($event)\" aria-haspopup=\"listbox\"\n                    (blur)=\"onInputBlur($event)\" (keydown)=\"onKeydown($event, true)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" [attr.autofocus]=\"autofocus\">\n            </div>\n            <div class=\"ui-helper-hidden-accessible ui-dropdown-hidden-select\">\n                <select [attr.required]=\"required\" [attr.name]=\"name\" tabindex=\"-1\" aria-hidden=\"true\">\n                    <option *ngIf=\"placeholder\" value=\"\">{{placeholder}}</option>\n                    <option *ngIf=\"selectedOption\" [value]=\"selectedOption.value\" [selected]=\"true\">{{selectedOption.label}}</option>\n                </select>\n            </div>\n            <label [ngClass]=\"{'ui-dropdown-label ui-inputtext ui-corner-all':true,'ui-dropdown-label-empty':(label == null || label.length === 0)}\" *ngIf=\"!editable && (label != null)\">\n                <ng-container *ngIf=\"!selectedItemTemplate\">{{label||'empty'}}</ng-container>\n                <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: {$implicit: selectedOption}\"></ng-container>\n            </label>\n            <label [ngClass]=\"{'ui-dropdown-label ui-inputtext ui-corner-all ui-placeholder':true,'ui-dropdown-label-empty': (placeholder == null || placeholder.length === 0)}\" *ngIf=\"!editable && (label == null)\">{{placeholder||'empty'}}</label>\n            <input #editableInput type=\"text\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" class=\"ui-dropdown-label ui-inputtext ui-corner-all\" *ngIf=\"editable\" [disabled]=\"disabled\" [attr.placeholder]=\"placeholder\"\n                        (click)=\"onEditableInputClick($event)\" (input)=\"onEditableInputChange($event)\" (focus)=\"onEditableInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <i class=\"ui-dropdown-clear-icon pi pi-times\" (click)=\"clear($event)\" *ngIf=\"value != null && showClear && !disabled\"></i>\n            <div class=\"ui-dropdown-trigger ui-state-default ui-corner-right\">\n                <span class=\"ui-dropdown-trigger-icon ui-clickable\" [ngClass]=\"dropdownIcon\"></span>\n            </div>\n            <div *ngIf=\"overlayVisible\" [ngClass]=\"'ui-dropdown-panel  ui-widget ui-widget-content ui-corner-all ui-shadow'\" [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\">\n                <div *ngIf=\"filter\" class=\"ui-dropdown-filter-container\" (click)=\"$event.stopPropagation()\">\n                    <input #filter type=\"text\" autocomplete=\"off\" [value]=\"filterValue||''\" class=\"ui-dropdown-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceholder\"\n                    (keydown.enter)=\"$event.preventDefault()\" (keydown)=\"onKeydown($event, false)\" (input)=\"onFilter($event)\" [attr.aria-label]=\"ariaFilterLabel\">\n                    <span class=\"ui-dropdown-filter-icon pi pi-search\"></span>\n                </div>\n                <div class=\"ui-dropdown-items-wrapper\" [style.max-height]=\"virtualScroll ? 'auto' : (scrollHeight||'auto')\">\n                    <ul class=\"ui-dropdown-items ui-dropdown-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\" role=\"listbox\">\n                        <ng-container *ngIf=\"group\">\n                            <ng-template ngFor let-optgroup [ngForOf]=\"optionsToDisplay\">\n                                <li class=\"ui-dropdown-item-group\">\n                                    <span *ngIf=\"!groupTemplate\">{{optgroup.label||'empty'}}</span>\n                                    <ng-container *ngTemplateOutlet=\"groupTemplate; context: {$implicit: optgroup}\"></ng-container>\n                                </li>\n                                <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: optgroup.items, selectedOption: selectedOption}\"></ng-container>\n                            </ng-template>\n                        </ng-container>\n                        <ng-container *ngIf=\"!group\">\n                            <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: optionsToDisplay, selectedOption: selectedOption}\"></ng-container>\n                        </ng-container>\n                        <ng-template #itemslist let-options let-selectedOption=\"selectedOption\">\n\n                            <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                                <ng-template ngFor let-option let-i=\"index\" [ngForOf]=\"options\">\n                                    <p-dropdownItem [option]=\"option\" [selected]=\"selectedOption == option\" \n                                                    (onClick)=\"onItemClick($event,i)\"\n                                                    [template]=\"itemTemplate\"></p-dropdownItem>\n                                </ng-template>\n                            </ng-container>\n                            <ng-template #virtualScrollList>\n                                <cdk-virtual-scroll-viewport (scrolledIndexChange)=\"scrollToSelectedVirtualScrollElement($event)\" #viewport [ngStyle]=\"{'height': scrollHeight}\" [itemSize]=\"itemSize\" *ngIf=\"virtualScroll && optionsToDisplay && optionsToDisplay.length\">\n                                    <ng-container *cdkVirtualFor=\"let option of options; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd\">         \n                                        <p-dropdownItem [option]=\"option\" [selected]=\"selectedOption == option\"\n                                                                   (onClick)=\"onItemClick($event,i)\"\n                                                                   [template]=\"itemTemplate\"></p-dropdownItem>\n                                    </ng-container>\n                                </cdk-virtual-scroll-viewport>\n                            </ng-template>\n                        </ng-template>\n                        <li *ngIf=\"filter && optionsToDisplay && optionsToDisplay.length === 0\" class=\"ui-dropdown-empty-message\">{{emptyFilterMessage}}</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            state('void', style({\n                transform: 'translateY(5%)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => visible', animate('{{showTransitionParams}}')),\n            transition('visible => void', animate('{{hideTransitionParams}}'))\n        ])\n    ],\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focused'\n    },\n    providers: [DROPDOWN_VALUE_ACCESSOR]\n})\nexport class Dropdown implements OnInit,AfterViewInit,AfterContentInit,AfterViewChecked,OnDestroy,ControlValueAccessor {\n\n    @Input() scrollHeight: string = '200px';\n\n    @Input() filter: boolean;\n    \n    @Input() name: string;\n\n    @Input() style: any;\n    \n    @Input() panelStyle: any;\n\n    @Input() styleClass: string;\n    \n    @Input() panelStyleClass: string;\n    \n    @Input() readonly: boolean;\n\n    @Input() required: boolean;\n    \n    @Input() editable: boolean;\n    \n    @Input() appendTo: any;\n\n    @Input() tabindex: number;\n    \n    @Input() placeholder: string;\n    \n    @Input() filterPlaceholder: string;\n\n    @Input() inputId: string;\n\n    @Input() selectId: string;\n    \n    @Input() dataKey: string;\n    \n    @Input() filterBy: string = 'label';\n    \n    @Input() autofocus: boolean;\n    \n    @Input() resetFilterOnHide: boolean = false;\n    \n    @Input() dropdownIcon: string = 'pi pi-chevron-down';\n    \n    @Input() optionLabel: string;\n\n    @Input() autoDisplayFirst: boolean = true;\n\n    @Input() group: boolean;\n\n    @Input() showClear: boolean;\n\n    @Input() emptyFilterMessage: string = 'No results found';\n\n    @Input() virtualScroll: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() showTransitionOptions: string = '225ms ease-out';\n\n    @Input() hideTransitionOptions: string = '195ms ease-in';\n\n    @Input() ariaFilterLabel: string;\n    \n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n    \n    @ViewChild('container', { static: false }) containerViewChild: ElementRef;\n    \n    @ViewChild('filter', { static: false }) filterViewChild: ElementRef;\n    \n    @ViewChild('in', { static: false }) focusViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport, {static:false}) viewPort: CdkVirtualScrollViewport;\n\n    @ViewChild('editableInput', { static: false }) editableInputViewChild: ElementRef;\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    private _autoWidth: boolean;\n\n    private virtualAutoScrolled: boolean;\n\n    private virtualScrollSelectedIndex: number;\n\n    @Input() get autoWidth(): boolean {\n        return this._autoWidth;\n    }\n    set autoWidth(_autoWidth: boolean) {\n        this._autoWidth = _autoWidth;\n        console.log(\"Setting autoWidth has no effect as automatic width calculation is removed for better perfomance.\");\n    }\n\n    private _disabled: boolean;\n\n    @Input() get disabled(): boolean {\n        return this._disabled;\n    };\n\n    set disabled(_disabled: boolean) {\n        if(_disabled)\n            this.focused = false;\n        \n        this._disabled = _disabled;\n        this.cd.detectChanges();\n    }\n\n    overlay: HTMLDivElement;\n\n    itemsWrapper: HTMLDivElement;\n    \n    itemTemplate: TemplateRef<any>;\n\n    groupTemplate: TemplateRef<any>;\n\n    selectedItemTemplate: TemplateRef<any>;\n    \n    selectedOption: any;\n    \n    _options: any[];\n    \n    value: any;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n\n    optionsToDisplay: any[];\n    \n    hover: boolean;\n    \n    focused: boolean;\n\n    filled: boolean;\n    \n    overlayVisible: boolean;\n    \n    documentClickListener: any;\n    \n    optionsChanged: boolean;\n    \n    panel: HTMLDivElement;\n    \n    dimensionsUpdated: boolean;\n    \n    selfClick: boolean;\n    \n    itemClick: boolean;\n\n    clearClick: boolean;\n    \n    hoveredItem: any;\n    \n    selectedOptionUpdated: boolean;\n    \n    filterValue: string;\n\n    searchValue: string;\n\n    searchIndex: number;\n    \n    searchTimeout: any;\n\n    previousSearchChar: string;\n\n    currentSearchChar: string;\n\n    documentResizeListener: any;\n    \n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef, public zone: NgZone) {}\n    \n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                case 'selectedItem':\n                    this.selectedItemTemplate = item.template;\n                break;\n\n                case 'group':\n                    this.groupTemplate = item.template;\n                break;\n                \n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n    \n    ngOnInit() {\n        this.optionsToDisplay = this.options;\n        this.updateSelectedOption(null);\n    }\n    \n    @Input() get options(): any[] {\n        return this._options;\n    }\n\n    set options(val: any[]) {\n        let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n        this._options = opts;\n        this.optionsToDisplay = this._options;\n        this.updateSelectedOption(this.value);\n        this.optionsChanged = true;\n        \n        if (this.filterValue && this.filterValue.length) {\n            this.activateFilter();\n        }\n    }\n    \n    ngAfterViewInit()Â {\n        if (this.editable) {\n            this.updateEditableLabel();\n        }\n    }\n    \n    get label(): string {\n        return (this.selectedOption ? this.selectedOption.label : null);\n    }\n    \n    updateEditableLabel(): void {\n        if (this.editableInputViewChild && this.editableInputViewChild.nativeElement) {\n            this.editableInputViewChild.nativeElement.value = (this.selectedOption ? this.selectedOption.label : this.value||'');\n        }\n    }\n\n    onItemClick(event, index) {\n        const option=event.option;\n        this.itemClick = true;\n\n        if (this.virtualScroll) {\n            this.virtualScrollSelectedIndex = index;\n        }\n        if (!option.disabled) {\n            this.selectItem(event, option);\n            this.focusViewChild.nativeElement.focus();\n            this.filled = true;\n        }\n\n        setTimeout(() => {\n            this.hide();\n        }, 150);\n    }\n\n    selectItem(event, option) {\n        if (this.selectedOption != option) {\n            this.selectedOption = option;\n            this.value = option.value;\n\n            this.onModelChange(this.value);\n            this.updateEditableLabel();\n            this.onChange.emit({\n                originalEvent: event.originalEvent,\n                value: this.value\n            });\n        }\n    }\n    \n    ngAfterViewChecked() {        \n        if (this.optionsChanged && this.overlayVisible) {\n            this.optionsChanged = false;\n            \n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignOverlay();\n                }, 1);\n            });\n        }\n        \n        if (this.selectedOptionUpdated && this.itemsWrapper) {\n            let selectedItem = DomHandler.findSingle(this.overlay, 'li.ui-state-highlight');\n            if (selectedItem) {\n                DomHandler.scrollInView(this.itemsWrapper, DomHandler.findSingle(this.overlay, 'li.ui-state-highlight'));\n            }\n            this.selectedOptionUpdated = false;\n        }\n    }\n    \n    writeValue(value: any): void {\n        if (this.filter) {\n            this.resetFilter();\n        }\n        \n        this.value = value;\n        this.updateSelectedOption(value);\n        this.updateEditableLabel();\n        this.updateFilledState();\n        this.cd.markForCheck();\n    }\n    \n    resetFilter(): void {\n        if (this.filterViewChild && this.filterViewChild.nativeElement) {\n            this.filterValue = null;\n            this.filterViewChild.nativeElement.value = '';\n        }\n        \n        this.optionsToDisplay = this.options;\n    }\n    \n    updateSelectedOption(val: any): void {\n        this.selectedOption = this.findOption(val, this.optionsToDisplay);\n        if (this.autoDisplayFirst && !this.placeholder && !this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length && !this.editable) {\n            this.selectedOption = this.optionsToDisplay[0];\n        }\n        this.selectedOptionUpdated = true;\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    onMouseclick(event) {\n        if (this.disabled||this.readonly) {\n            return;\n        }\n\n        this.onClick.emit(event);\n        \n        this.selfClick = true;\n        this.clearClick = DomHandler.hasClass(event.target, 'ui-dropdown-clear-icon');\n        \n        if (!this.itemClick && !this.clearClick) {\n            this.focusViewChild.nativeElement.focus();\n            \n            if (this.overlayVisible)\n                this.hide();\n            else\n                this.show();\n\n            this.cd.detectChanges();\n        }\n    }\n    \n    onEditableInputClick(event) {\n        this.itemClick = true;\n        this.bindDocumentClickListener();\n    }\n    \n    onEditableInputFocus(event) {\n        this.focused = true;\n        this.hide();\n        this.onFocus.emit(event);\n    }\n    \n    onEditableInputChange(event) {\n        this.value = event.target.value;\n        this.updateSelectedOption(this.value);\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n    }\n    \n    show() {\n        this.overlayVisible = true;\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                this.itemsWrapper = DomHandler.findSingle(this.overlay, '.ui-dropdown-items-wrapper');\n                this.appendOverlay();\n                if (this.autoZIndex) {\n                    this.overlay.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                this.alignOverlay();\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n\n                if (this.options && this.options.length) {\n                    if(!this.virtualScroll) {\n                        let selectedListItem = DomHandler.findSingle(this.itemsWrapper, '.ui-dropdown-item.ui-state-highlight');\n                        if (selectedListItem) {\n                            DomHandler.scrollInView(this.itemsWrapper, selectedListItem);\n                        }\n                    }\n                }\n\n                if (this.filterViewChild && this.filterViewChild.nativeElement) {\n                    this.filterViewChild.nativeElement.focus();\n                }\n\n                this.onShow.emit(event);\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    scrollToSelectedVirtualScrollElement(event){\n        if (!this.virtualAutoScrolled) {\n            if (this.filter && !this.resetFilterOnHide) {\n                let index = this.optionsToDisplay.findIndex(option => option.value === this.value);\n                if (event == 0 && index > 0) {\n                    this.viewPort.scrollToIndex(index,'auto');\n                }\n            }\n            else {\n                if (event == 0 && this.virtualScrollSelectedIndex > 0) {\n                    this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex,'auto');\n                }\n            }\n\n            this.virtualAutoScrolled = true;\n        }\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                DomHandler.appendChild(this.overlay, this.appendTo);\n\n            this.overlay.style.minWidth = DomHandler.getWidth(this.containerViewChild.nativeElement) + 'px';\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.overlay && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlay);\n        }\n    }\n    \n    hide() {\n        this.overlayVisible = false;\n        \n        if (this.filter && this.resetFilterOnHide) {\n            this.resetFilter();\n        }\n\n        if(this.virtualScroll) {\n            this.virtualAutoScrolled = false;\n        }\n\n        this.cd.markForCheck();\n        this.onHide.emit(event);\n    }\n    \n    alignOverlay() {\n        if (this.overlay) {\n            if (this.appendTo)\n                DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);\n            else\n                DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n        }        \n    }\n    \n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n    \n    onInputBlur(event) {\n        this.focused = false;\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n\n    findPrevEnabledOption(index) {\n        let prevEnabledOption;\n\n        if (this.optionsToDisplay && this.optionsToDisplay.length) {\n            for (let i = (index - 1); 0 <= i; i--) {\n                let option = this.optionsToDisplay[i];\n                if (option.disabled) {\n                    continue;\n                }\n                else {\n                    prevEnabledOption = option;\n                    break;\n                }\n            }\n\n            if (!prevEnabledOption) {\n                for (let i = this.optionsToDisplay.length - 1; i >= index ; i--) {\n                    let option = this.optionsToDisplay[i];\n                    if (option.disabled) {\n                        continue;\n                    }\n                    else {\n                        prevEnabledOption = option;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return prevEnabledOption;\n    }\n\n    findNextEnabledOption(index) {\n        let nextEnabledOption;\n\n        if (this.optionsToDisplay && this.optionsToDisplay.length) {\n            for (let i = (index + 1); index < (this.optionsToDisplay.length - 1); i++) {\n                let option = this.optionsToDisplay[i];\n                if (option.disabled) {\n                    continue;\n                }\n                else {\n                    nextEnabledOption = option;\n                    break;\n                }\n            }\n\n            if (!nextEnabledOption) {\n                for (let i = 0; i < index; i++) {\n                    let option = this.optionsToDisplay[i];\n                    if (option.disabled) {\n                        continue;\n                    }\n                    else {\n                        nextEnabledOption = option;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return nextEnabledOption;\n    }\n    \n    onKeydown(event: KeyboardEvent, search: boolean) {\n        if (this.readonly || !this.optionsToDisplay || this.optionsToDisplay.length === null) {\n            return;\n        }\n\n        switch(event.which) {\n            //down\n            case 40:\n                if (!this.overlayVisible && event.altKey) {\n                    this.show();\n                }\n                else {\n                    if (this.group) {\n                        let selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                        \n                        if (selectedItemIndex !== -1) {\n                            let nextItemIndex = selectedItemIndex.itemIndex + 1;\n                            if (nextItemIndex < (this.optionsToDisplay[selectedItemIndex.groupIndex].items.length)) {\n                                this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex].items[nextItemIndex]);\n                                this.selectedOptionUpdated = true;\n                            }\n                            else if (this.optionsToDisplay[selectedItemIndex.groupIndex + 1]) {\n                                this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex + 1].items[0]);\n                                this.selectedOptionUpdated = true;\n                            }\n                        }\n                        else {\n                            this.selectItem(event, this.optionsToDisplay[0].items[0]);\n                        }\n                    }\n                    else {\n                        let selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                        let nextEnabledOption = this.findNextEnabledOption(selectedItemIndex);\n                        if (nextEnabledOption) {\n                            this.selectItem(event, nextEnabledOption);\n                            this.selectedOptionUpdated = true;\n                        }\n                    }\n                }\n                \n                event.preventDefault();\n                \n            break;\n            \n            //up\n            case 38:\n                if (this.group) {\n                    let selectedItemIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                    if (selectedItemIndex !== -1) {\n                        let prevItemIndex = selectedItemIndex.itemIndex - 1;\n                        if (prevItemIndex >= 0) {\n                            this.selectItem(event, this.optionsToDisplay[selectedItemIndex.groupIndex].items[prevItemIndex]);\n                            this.selectedOptionUpdated = true;\n                        }\n                        else if (prevItemIndex < 0) {\n                            let prevGroup = this.optionsToDisplay[selectedItemIndex.groupIndex - 1];\n                            if (prevGroup) {\n                                this.selectItem(event, prevGroup.items[prevGroup.items.length - 1]);\n                                this.selectedOptionUpdated = true;\n                            }\n                        }\n                    }\n                }\n                else {\n                    let selectedItemIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n                    let prevEnabledOption = this.findPrevEnabledOption(selectedItemIndex);\n                    if (prevEnabledOption) {\n                        this.selectItem(event, prevEnabledOption);\n                        this.selectedOptionUpdated = true;\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //space\n            case 32:\n            case 32:\n                if (!this.overlayVisible){\n                    this.show();\n                    event.preventDefault();\n                }\n            break;\n            \n            //enter\n            case 13:\n                if (!this.filter || (this.optionsToDisplay && this.optionsToDisplay.length > 0)) {\n                    this.hide();\n                }\n                \n                event.preventDefault();\n            break;\n            \n            //escape and tab\n            case 27:\n            case 9:\n                this.hide();\n            break;\n\n            //search item based on keyboard input\n            default:\n                if (search) {\n                    this.search(event);\n                }\n            break;\n        }\n    }\n\n    search(event) {\n        if (this.searchTimeout) {\n            clearTimeout(this.searchTimeout);\n        }\n\n        const char = String.fromCharCode(event.keyCode);\n        this.previousSearchChar = this.currentSearchChar;\n        this.currentSearchChar = char;\n\n        if (this.previousSearchChar === this.currentSearchChar) \n            this.searchValue = this.currentSearchChar;\n        else\n            this.searchValue = this.searchValue ? this.searchValue + char : char;\n\n        let newOption;\n        if (this.group) {\n            let searchIndex = this.selectedOption ? this.findOptionGroupIndex(this.selectedOption.value, this.optionsToDisplay) : {groupIndex: 0, itemIndex: 0};\n            newOption = this.searchOptionWithinGroup(searchIndex);\n        }\n        else {\n            let searchIndex = this.selectedOption ? this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay) : -1;\n            newOption = this.searchOption(++searchIndex);\n        }\n        \n        if (newOption) {\n            this.selectItem(event, newOption);\n            this.selectedOptionUpdated = true;\n        }\n\n        this.searchTimeout = setTimeout(() => {\n            this.searchValue = null;\n        }, 250);\n    }\n\n    searchOption(index) {\n        let option;\n\n        if (this.searchValue) {\n            option = this.searchOptionInRange(index, this.optionsToDisplay.length);\n\n            if (!option) {\n                option = this.searchOptionInRange(0, index);\n            }\n        }\n\n        return option;\n    }\n\n    searchOptionInRange(start, end) {\n        for (let i = start; i < end; i++) {\n            let opt = this.optionsToDisplay[i];\n            if (opt.label.toLowerCase().startsWith(this.searchValue.toLowerCase())) {\n                return opt;\n            }\n        }\n\n        return null;\n    }\n\n    searchOptionWithinGroup(index) {\n        let option;\n\n        if (this.searchValue) {\n            for (let i = index.groupIndex; i < this.optionsToDisplay.length; i++) {\n                for (let j = (index.groupIndex === i) ? (index.itemIndex + 1) : 0; j < this.optionsToDisplay[i].items.length; j++) {\n                    let opt = this.optionsToDisplay[i].items[j];\n                    if (opt.label.toLowerCase().startsWith(this.searchValue.toLowerCase())) {\n                        return opt;\n                    }\n                }\n            }\n\n            if (!option) {\n                for (let i = 0; i <= index.groupIndex; i++) {\n                    for (let j = 0; j < ((index.groupIndex === i) ? index.itemIndex : this.optionsToDisplay[i].items.length); j++) {\n                        let opt = this.optionsToDisplay[i].items[j];\n                        if (opt.label.toLowerCase().startsWith(this.searchValue.toLowerCase())) {\n                            return opt;\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n   \n    findOptionIndex(val: any, opts: any[]): number {\n        let index: number = -1;\n        if (opts) {\n            for (let i = 0; i < opts.length; i++) {\n                if ((val == null && opts[i].value == null) ||Â ObjectUtils.equals(val, opts[i].value, this.dataKey)) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        \n        return index;\n    }\n\n    findOptionGroupIndex(val: any, opts: any[]): any {\n        let groupIndex, itemIndex;\n\n        if (opts) {\n            for (let i = 0; i < opts.length; i++) {\n                groupIndex = i;\n                itemIndex = this.findOptionIndex(val, opts[i].items);\n\n                if (itemIndex !== -1) {\n                    break;\n                }\n            }\n        }\n\n        if (itemIndex !== -1) {\n            return {groupIndex: groupIndex, itemIndex: itemIndex};\n        }\n        else {\n            return -1;\n        }\n    }\n    \n    findOption(val: any, opts: any[], inGroup?: boolean): SelectItem {\n        if (this.group && !inGroup) {\n            let opt: SelectItem;\n            if (opts && opts.length) {\n                for (let optgroup of opts) {\n                    opt = this.findOption(val, optgroup.items, true);\n                    if (opt) {\n                        break;\n                    }\n                }\n            }\n            return opt;\n        }\n        else {\n            let index: number = this.findOptionIndex(val, opts);\n            return (index != -1) ? opts[index] : null;\n        }\n    }\n    \n    onFilter(event): void {\n        let inputValue = event.target.value;\n        if (inputValue && inputValue.length) {\n            this.filterValue = inputValue;\n            this.activateFilter();\n        }\n        else {\n            this.filterValue = null;\n            this.optionsToDisplay = this.options;\n        }\n        \n        this.optionsChanged = true;\n    }\n    \n    activateFilter() {\n        let searchFields: string[] = this.filterBy.split(',');\n        \n        if (this.options && this.options.length) {\n            if (this.group) {\n                let filteredGroups = [];\n                for (let optgroup of this.options) {\n                    let filteredSubOptions = ObjectUtils.filter(optgroup.items, searchFields, this.filterValue);\n                    if (filteredSubOptions && filteredSubOptions.length) {\n                        filteredGroups.push({\n                            label: optgroup.label,\n                            value: optgroup.value,\n                            items: filteredSubOptions\n                        });\n                    }\n                }\n\n                this.optionsToDisplay = filteredGroups;\n            }\n            else {\n                this.optionsToDisplay = ObjectUtils.filter(this.options, searchFields, this.filterValue);\n            }\n\n            this.optionsChanged = true;\n        }\n    }\n    \n    applyFocus(): void {\n        if (this.editable)\n            DomHandler.findSingle(this.el.nativeElement, '.ui-dropdown-label.ui-inputtext').focus();\n        else\n            DomHandler.findSingle(this.el.nativeElement, 'input[readonly]').focus();\n    }\n\n    focus(): void {\n        this.applyFocus();\n    }\n    \n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', () => {\n                if (!this.selfClick && !this.itemClick) {\n                    this.hide();\n                    this.unbindDocumentClickListener();\n                }\n                \n                this.clearClickState();\n                this.cd.markForCheck();\n            });\n        }\n    }\n\n    clearClickState() {\n        this.selfClick = false;\n        this.itemClick = false;\n    }\n    \n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onWindowResize() {\n        if (!DomHandler.isAndroid()) {\n            this.hide();\n        }\n    }\n\n    updateFilledState() {\n        this.filled = (this.selectedOption != null);\n    }\n\n    clear(event: Event) {\n        this.clearClick = true;\n        this.value = null;\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n        this.updateSelectedOption(this.value);\n        this.updateEditableLabel();\n        this.updateFilledState();\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.overlay = null;\n        this.itemsWrapper = null;\n    }\n    \n    ngOnDestroy() {\n        this.restoreOverlayAppend();\n        this.onOverlayHide();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,SharedModule,ScrollingModule],\n    exports: [Dropdown,SharedModule,ScrollingModule],\n    declarations: [Dropdown,DropdownItem]\n})\nexport class DropdownModule { }\n"]}